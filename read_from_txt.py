import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import hilbert

# def ReadFromTXT(filename = "data.txt"):
#     loaded_data = np.loadtxt(filename)
#     return loaded_data

# decimated = ReadFromTXT("decimated-data/decimated_read_134654.txt")
# decimated_nolpf = ReadFromTXT("decimated-data/decimated_read_140833.txt")
# decimated_1000 = ReadFromTXT("decimated-data/1000exp_1505.txt")
# decimated_1000_phrst = ReadFromTXT("decimated-data/1000exp_1525.txt")

# i_1000 = decimated_1000[::2]
# i_1000_avg = np.mean(i_1000, axis = 0)

# q_1000 = decimated_1000[1::2]
# q_1000_avg = np.mean(q_1000, axis = 0)

# i_1000_phrst = decimated_1000_phrst[::2]
# i_1000_phrst_avg = np.mean(i_1000_phrst, axis = 0)
# q_1000_phrst = decimated_1000_phrst[1::2]
# q_1000_phrst_avg = np.mean(q_1000_phrst, axis = 0)

oneshot_test = np.loadtxt("06-20-data/data_20250620_115445_Sample=2024_Feb_Argn_YIG_2_5b_b1_Pulse=flat.txt", delimiter=',')

# Create subplots: 1 row, 2 columns
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 8))

# First subplot
# ax1.set_title("only RF amp with LPF, I = -3.0 A, 1000exp")
ax1.set_xlabel("ns")
ax1.set_ylabel("a.u.")

# # Second subplot
# ax2.set_title("only RF amp with LPF, I = -3.0 A, 1000exp, phrst")
ax2.set_xlabel("ns")
ax2.set_ylabel("a.u.")

ax1.plot(oneshot_test[-1], oneshot_test[0], label="400 MHz, one-shot")
ax1.set_xlim(20, 160)
ax2.plot(oneshot_test[-1], oneshot_test[-2], label="400 MHz, 300-average, one-shot")
ax2.set_xlim(20, 160)
ax1.legend()
ax2.legend()
plt.tight_layout()
plt.show()




# Load
with open("06-20-data/decimated_read_145649.txt", 'r') as f:
    first_line = f.readline()
    shape = tuple(map(int, first_line.strip().split(":")[1].strip(" ()").split(',')))
    data = np.loadtxt(f)

restored_array = data.reshape(shape)

channel_1 = restored_array[:, 0, :, :]
channel_1_I = channel_1[:, 0]
channel_1_Q = channel_1[:, 1]
channel_1_I_avg = np.mean(channel_1_I, axis=0)
channel_1_Q_avg = np.mean(channel_1_Q, axis=0)

channel_2 = restored_array[:, 1, :, :]
channel_2_I = channel_2[:, 0]
channel_2_Q = channel_2[:, 1]
channel_2_I_avg = np.mean(channel_2_I, axis=0)
channel_2_Q_avg = np.mean(channel_2_Q, axis=0)

timerow = [0.0, 1.808449074074074, 3.616898148148148, 5.425347222222222, 7.233796296296296, 9.04224537037037, 10.850694444444445, 12.659143518518517, 14.467592592592592, 16.276041666666664, 18.08449074074074, 19.892939814814813, 21.70138888888889, 23.509837962962962, 25.318287037037035, 27.126736111111107, 28.935185185185183, 30.74363425925926, 32.55208333333333, 34.360532407407405, 36.16898148148148, 37.97743055555555, 39.785879629629626, 41.5943287037037, 43.40277777777778, 45.21122685185185, 47.019675925925924, 48.828125, 50.63657407407407, 52.445023148148145, 54.253472222222214, 56.06192129629629, 57.87037037037037, 59.67881944444444, 61.48726851851852, 63.29571759259259, 65.10416666666666, 66.91261574074075, 68.72106481481481, 70.52951388888889, 72.33796296296296, 74.14641203703704, 75.9548611111111, 77.76331018518518, 79.57175925925925, 81.38020833333333, 83.1886574074074, 84.99710648148148, 86.80555555555556, 88.61400462962962, 90.4224537037037, 92.23090277777777, 94.03935185185185, 95.84780092592591, 97.65625, 99.46469907407408, 101.27314814814814, 103.08159722222221, 104.89004629629629, 106.69849537037037, 108.50694444444443, 110.31539351851852, 112.12384259259258, 113.93229166666666, 115.74074074074073, 117.54918981481481, 119.35763888888889, 121.16608796296295, 122.97453703703704, 124.7829861111111, 126.59143518518518, 128.39988425925924, 130.20833333333331, 132.01678240740742, 133.8252314814815, 135.63368055555554, 137.44212962962962, 139.2505787037037, 141.05902777777777, 142.86747685185182, 144.67592592592592, 146.484375, 148.29282407407408, 150.10127314814815, 151.9097222222222, 153.71817129629628, 155.52662037037035, 157.33506944444446, 159.1435185185185, 160.95196759259258, 162.76041666666666, 164.56886574074073, 166.3773148148148, 168.18576388888886, 169.99421296296296, 171.80266203703704, 173.61111111111111, 175.41956018518516, 177.22800925925924, 179.03645833333331, 180.8449074074074, 182.6533564814815, 184.46180555555554, 186.27025462962962, 188.0787037037037, 189.88715277777777, 191.69560185185182, 193.5040509259259, 195.3125, 197.12094907407408, 198.92939814814815, 200.7378472222222, 202.54629629629628, 204.35474537037035, 206.16319444444443, 207.9716435185185, 209.78009259259258, 211.58854166666666, 213.39699074074073, 215.2054398148148, 217.01388888888886, 218.82233796296293, 220.63078703703704, 222.43923611111111, 224.24768518518516, 226.05613425925924, 227.86458333333331, 229.6730324074074, 231.48148148148147, 233.28993055555554, 235.09837962962962, 236.9068287037037, 238.71527777777777, 240.52372685185182, 242.3321759259259, 244.14062499999997, 245.94907407407408, 247.75752314814815, 249.5659722222222, 251.37442129629628, 253.18287037037035, 254.99131944444443, 256.7997685185185, 258.60821759259255, 260.41666666666663, 262.2251157407407, 264.03356481481484, 265.8420138888889, 267.650462962963, 269.458912037037, 271.2673611111111, 273.07581018518516, 274.88425925925924, 276.6927083333333, 278.5011574074074, 280.30960648148147, 282.11805555555554, 283.9265046296296, 285.73495370370364, 287.5434027777777, 289.35185185185185, 291.1603009259259, 292.96875, 294.7771990740741, 296.58564814814815, 298.39409722222223, 300.2025462962963, 302.0109953703703, 303.8194444444444, 305.6278935185185, 307.43634259259255, 309.24479166666663, 311.0532407407407, 312.8616898148148, 314.6701388888889, 316.478587962963, 318.287037037037, 320.0954861111111, 321.90393518518516, 323.71238425925924, 325.5208333333333, 327.3292824074074, 329.13773148148147, 330.94618055555554, 332.7546296296296, 334.56307870370364, 336.3715277777777, 338.1799768518518, 339.9884259259259, 341.796875, 343.6053240740741, 345.41377314814815, 347.22222222222223, 349.0306712962963, 350.8391203703703, 352.6475694444444, 354.4560185185185, 356.26446759259255, 358.07291666666663, 359.8813657407407, 361.6898148148148, 363.49826388888886, 365.306712962963, 367.115162037037, 368.9236111111111, 370.73206018518516, 372.54050925925924, 374.3489583333333, 376.1574074074074, 377.96585648148147, 379.77430555555554, 381.5827546296296, 383.39120370370364, 385.1996527777777, 387.0081018518518, 388.81655092592587, 390.625, 392.4334490740741, 394.24189814814815, 396.05034722222223, 397.8587962962963, 399.6672453703703, 401.4756944444444, 403.2841435185185, 405.09259259259255, 406.90104166666663, 408.7094907407407, 410.5179398148148, 412.32638888888886, 414.13483796296293, 415.943287037037, 417.7517361111111, 419.56018518518516, 421.36863425925924, 423.1770833333333, 424.9855324074074, 426.79398148148147, 428.60243055555554, 430.4108796296296, 432.21932870370364, 434.0277777777777, 435.8362268518518, 437.64467592592587, 439.45312499999994, 441.2615740740741, 443.07002314814815, 444.87847222222223, 446.6869212962963, 448.4953703703703, 450.3038194444444, 452.1122685185185, 453.92071759259255, 455.72916666666663, 457.5376157407407, 459.3460648148148, 461.15451388888886, 462.96296296296293, 464.77141203703695, 466.5798611111111, 468.38831018518516, 470.19675925925924, 472.0052083333333, 473.8136574074074, 475.62210648148147, 477.43055555555554, 479.2390046296296, 481.04745370370364, 482.8559027777777, 484.6643518518518, 486.47280092592587, 488.28124999999994, 490.089699074074, 491.89814814814815, 493.70659722222223, 495.5150462962963, 497.3234953703703, 499.1319444444444, 500.9403935185185, 502.74884259259255, 504.55729166666663, 506.3657407407407, 508.1741898148148, 509.98263888888886, 511.79108796296293, 513.599537037037, 515.4079861111111, 517.2164351851851, 519.0248842592592, 520.8333333333333, 522.6417824074073, 524.4502314814814, 526.2586805555554, 528.0671296296297, 529.8755787037037, 531.6840277777778, 533.4924768518518, 535.300925925926, 537.109375, 538.917824074074, 540.7262731481482, 542.5347222222222, 544.3431712962963, 546.1516203703703, 547.9600694444445, 549.7685185185185, 551.5769675925926, 553.3854166666666, 555.1938657407406, 557.0023148148148, 558.8107638888888, 560.6192129629629, 562.427662037037, 564.2361111111111, 566.0445601851851, 567.8530092592592, 569.6614583333333, 571.4699074074073, 573.2783564814814, 575.0868055555554, 576.8952546296296, 578.7037037037037, 580.5121527777778, 582.3206018518518, 584.129050925926, 585.9375, 587.745949074074, 589.5543981481482, 591.3628472222222, 593.1712962962963, 594.9797453703703, 596.7881944444445, 598.5966435185185, 600.4050925925926, 602.2135416666666, 604.0219907407406, 605.8304398148148, 607.6388888888888, 609.4473379629629, 611.255787037037, 613.0642361111111, 614.8726851851851, 616.6811342592592, 618.4895833333333, 620.2980324074073, 622.1064814814814, 623.9149305555554, 625.7233796296296, 627.5318287037036, 629.3402777777778, 631.1487268518518, 632.957175925926, 634.765625, 636.574074074074, 638.3825231481482, 640.1909722222222, 641.9994212962963, 643.8078703703703, 645.6163194444445, 647.4247685185185, 649.2332175925926, 651.0416666666666, 652.8501157407406, 654.6585648148148, 656.4670138888888, 658.2754629629629, 660.083912037037, 661.8923611111111, 663.7008101851851, 665.5092592592592, 667.3177083333333, 669.1261574074073, 670.9346064814814, 672.7430555555554, 674.5515046296296, 676.3599537037036, 678.1684027777777, 679.9768518518518, 681.785300925926, 683.59375, 685.402199074074, 687.2106481481482, 689.0190972222222, 690.8275462962963, 692.6359953703703, 694.4444444444445, 696.2528935185185, 698.0613425925926, 699.8697916666666, 701.6782407407406, 703.4866898148148, 705.2951388888888, 707.1035879629629, 708.912037037037, 710.7204861111111, 712.5289351851851, 714.3373842592592, 716.1458333333333, 717.9542824074073, 719.7627314814814, 721.5711805555554, 723.3796296296296, 725.1880787037036, 726.9965277777777, 728.8049768518517, 730.613425925926, 732.421875, 734.230324074074, 736.0387731481482, 737.8472222222222, 739.6556712962963, 741.4641203703703, 743.2725694444445, 745.0810185185185, 746.8894675925926, 748.6979166666666, 750.5063657407406, 752.3148148148148, 754.1232638888888, 755.9317129629629, 757.740162037037, 759.5486111111111, 761.3570601851851, 763.1655092592592, 764.9739583333333, 766.7824074074073, 768.5908564814814, 770.3993055555554, 772.2077546296296, 774.0162037037036, 775.8246527777777, 777.6331018518517, 779.441550925926, 781.25, 783.058449074074, 784.8668981481482, 786.6753472222222, 788.4837962962963, 790.2922453703703, 792.1006944444445, 793.9091435185185, 795.7175925925926, 797.5260416666666, 799.3344907407406, 801.1429398148148, 802.9513888888888, 804.7598379629629, 806.568287037037, 808.3767361111111, 810.1851851851851, 811.9936342592592, 813.8020833333333, 815.6105324074073, 817.4189814814814, 819.2274305555554, 821.0358796296296, 822.8443287037036, 824.6527777777777, 826.4612268518517, 828.2696759259259, 830.078125, 831.886574074074, 833.6950231481482, 835.5034722222222, 837.3119212962963, 839.1203703703703, 840.9288194444445, 842.7372685185185, 844.5457175925926, 846.3541666666666, 848.1626157407406, 849.9710648148148, 851.7795138888888, 853.5879629629629, 855.396412037037, 857.2048611111111, 859.0133101851851, 860.8217592592592, 862.6302083333333, 864.4386574074073, 866.2471064814814, 868.0555555555554, 869.8640046296296, 871.6724537037036, 873.4809027777777, 875.2893518518517, 877.0978009259259, 878.9062499999999, 880.714699074074, 882.5231481481482, 884.3315972222222, 886.1400462962963, 887.9484953703703, 889.7569444444445, 891.5653935185185, 893.3738425925926, 895.1822916666666, 896.9907407407406, 898.7991898148148, 900.6076388888888, 902.4160879629629, 904.224537037037, 906.0329861111111, 907.8414351851851, 909.6498842592592, 911.4583333333333, 913.2667824074073, 915.0752314814814, 916.8836805555554, 918.6921296296296, 920.5005787037036, 922.3090277777777, 924.1174768518517, 925.9259259259259, 927.7343749999999, 929.5428240740739, 931.3512731481482, 933.1597222222222, 934.9681712962963, 936.7766203703703, 938.5850694444445, 940.3935185185185, 942.2019675925926, 944.0104166666666, 945.8188657407406, 947.6273148148148, 949.4357638888888, 951.2442129629629, 953.052662037037, 954.8611111111111, 956.6695601851851, 958.4780092592592, 960.2864583333333, 962.0949074074073, 963.9033564814814, 965.7118055555554, 967.5202546296296, 969.3287037037036, 971.1371527777777, 972.9456018518517, 974.7540509259259, 976.5624999999999, 978.3709490740739, 980.179398148148, 981.9878472222222, 983.7962962962963, 985.6047453703703, 987.4131944444445, 989.2216435185185, 991.0300925925926, 992.8385416666666, 994.6469907407406, 996.4554398148148, 998.2638888888888]
timerow = np.array(timerow)

# print(decimated_1000[0].shape)

# plt.figure()
# plt.plot(timerow, restored_array[0][0][0], label="I")
# plt.plot(timerow, restored_array[0][0][1], label="Q")
# plt.plot(timerow, np.abs(restored_array[0][0][0] + 1j * restored_array[0][0][1]), label="Magnitude")
# plt.xlabel("ns")
# plt.ylabel("a.u.")
# plt.title("1000exp Decimated Data")
# plt.legend()
# plt.show()

# Create subplots: 1 row, 2 columns
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 8))

# First subplot
# ax1.set_title("only RF amp with LPF, I = -3.0 A, 1000exp")
ax1.set_xlabel("ns")
ax1.set_ylabel("a.u.")

# # Second subplot
# ax2.set_title("only RF amp with LPF, I = -3.0 A, 1000exp, phrst")
ax2.set_xlabel("ns")
ax2.set_ylabel("a.u.")

ax1.plot(timerow, channel_1_I[0], label="I, one-shot")
ax1.plot(timerow, channel_1_Q[0], label="Q, one-shot")
# ax1.plot(timerow, np.abs(restored_array[0][0][0] + 1j * restored_array[0][0][1]), label = "Magnitude")
ax2.plot(timerow, channel_1_I_avg, label="I, 1000-exp average")
ax2.plot(timerow, channel_1_Q_avg, label="Q, 1000-exp average")
# ax2.plot(timerow, np.abs(restored_array[0][1][0] + 1j * restored_array[0][1][1]), label = "Magnitude")
ax1.legend()
ax2.legend()
plt.suptitle("Channel 1 Data")
plt.tight_layout()
plt.show()


def CalculateSNR(signal):

    """
    This function calculates the Signal-to-Noise Ratio (SNR) of the signal.
    It takes the signal as input and returns the SNR in both linear and dB scale.
    The SNR is calculated by taking the maximum amplitude of the pulse region and
    dividing it by the standard deviation of the noise region.
    """

    pulse_region = signal[111:180]
    signal_amplitude = np.max(pulse_region) - np.min(pulse_region)

    noise_region = signal[388:]
    noise_amplitude = np.std(noise_region)

    snr = signal_amplitude / noise_amplitude
    snr_dB = 20 * np.log10(snr)

    return snr, snr_dB


# calculate the SNR of the averaged data
snr, snr_dB = CalculateSNR(channel_1_I_avg)
print(f"SNR (linear): {snr:.2f}, SNR (dB): {snr_dB:.2f} dB")



# Create subplots: 1 row, 2 columns
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 8))

# First subplot
# ax1.set_title("only RF amp with LPF, I = -3.0 A, 1000exp")
ax1.set_xlabel("ns")
ax1.set_ylabel("a.u.")

# # Second subplot
# ax2.set_title("only RF amp with LPF, I = -3.0 A, 1000exp, phrst")
ax2.set_xlabel("ns")
ax2.set_ylabel("a.u.")

ax1.plot(timerow, channel_2_I[0], label="I, one-shot")
ax1.plot(timerow, channel_2_Q[0], label="Q, one-shot")
# ax1.plot(timerow, np.abs(restored_array[0][0][0] + 1j * restored_array[0][0][1]), label = "Magnitude")
ax2.plot(timerow, channel_2_I_avg, label="I, 1000-exp average")
ax2.plot(timerow, channel_2_Q_avg, label="Q, 1000-exp average")
# ax2.plot(timerow, np.abs(restored_array[0][1][0] + 1j * restored_array[0][1][1]), label = "Magnitude")
ax1.legend()
ax2.legend()
plt.suptitle("Channel 2 Data")
plt.tight_layout()
plt.show()












# print(test)
# raw = test[0]

# print(raw.shape)

# signal= np.concatenate(( raw[:200], raw[200:1300], raw[:200], raw[200:1300] , raw[2600:]))
# print(signal.shape)

# abs_signal = np.abs(signal)

# # Step 2: Smooth to get envelope (simple moving average)
# window_size = 20
# kernel = np.ones(window_size) / window_size
# smoothed = np.convolve(abs_signal, kernel, mode='same')

# # Step 3: Threshold
# threshold = 0.01 * np.max(smoothed)
# above = smoothed > threshold

# # Step 4: Detect rising and falling edges
# edges = np.diff(above.astype(int))
# starts = np.where(edges == 1)[0] + 1
# ends = np.where(edges == -1)[0] + 1
# print(starts)
# print(ends)

# # Step 5: Match starts to ends and calculate widths
# pulse_widths = []
# pulse_positions = []

# for s in starts:
#     for e in ends:
#         if e > s:
#             endpoint_pair = [s, e]
#             pulse_positions.append(endpoint_pair)
#             width = (test[1][e] - test[1][s]) * 1e3
#             pulse_widths.append(width)
#             break

# for i in range(len(pulse_widths)):
#     print(f"Pulse detected: starts at {pulse_positions[i][0]} ns, ends at {pulse_positions[i][1]} ns, has the width {pulse_widths[i]} ns")

# pulse_positions = np.array(pulse_positions)
# pulse_widths = np.array(pulse_widths)

# print(pulse_positions)
# print(pulse_widths)

# # Plotting
# fig, axs = plt.subplots(1, 1)

# # Subplot 1: Full signal
# axs.plot(signal, label='Original signal')
# axs.plot(smoothed, label='Smoothed envelope', alpha=0.7)
# axs.axhline(threshold, color='gray', linestyle='--', label='Threshold')
# for s, e in zip(matched_starts, matched_ends):
#     axs.axvline(s, color='red', linestyle='--')
#     axs.axvline(e, color='green', linestyle='--')
# axs.set_title(f'Detected {len(pulse_widths)} pulses')
# axs.legend()
# axs.set_ylabel('Amplitude')

# plt.tight_layout()
# plt.show()
